generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  password          String
  name              String
  uniqueKey         String          @unique @map("unique_key")
  phone             String?
  birthDate         DateTime        @map("birth_date")
  preferredLanguage String          @default("pt_BR") @map("preferred_language")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  userProfile       UserProfile?
  loginToken        LoginToken?
  //eu acho que isso ta invertido ---
  followedBy        UserFollowing[] @relation("UserFollowedBy")
  following         UserFollowing[] @relation("UserFollowing")
  // --------
  posts             Post[]
  //The groups this user is master of
  masterGroups      Group[]
  //The groups this user participates
  groups            UserGroup[]
  likes             Like[]
  comments          Comment[]
  reports           Report[]
  blocked           UserBlock[]     @relation("UserBlocked")
  blockedBy         UserBlock[]     @relation("UserBlockedBy")

  @@map("users")
}

model UserProfile {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id])
  userId           Int      @unique @map("user_id")
  profilePictureId Int?     @map("profile_picture_id")
  bannerId         Int?     @map("banner_id")
  primaryColor     String   @default("#ffffff") @map("primary_color")
  secondaryColor   String   @default("#f6f6f6") @map("secondary_color")
  backgroundColor  String   @default("ffffff") @map("background_color")
  backgroundImage  Int?     @map("background_image")
  bio              String?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("user_profile")
}

model LoginToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique @map("user_id")
  token     String   @unique
  device    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("login_token")
}

model UserFollowing {
  user       User     @relation("UserFollowing", fields: [userId], references: [id])
  userId     Int      @map("user_id") //Id do usuario dono da relacao
  followed   User     @relation("UserFollowedBy", fields: [followedId], references: [id])
  followedId Int      @map("followed_id") //Essa Ã© o id do cara seguido
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([userId, followedId])
  @@map("user_followings")
}

model Group {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  master      User        @relation(fields: [masterId], references: [id])
  masterId    Int         @map("master_id")
  name        String
  description String
  imageId     Int         @map("image_id")
  users       UserGroup[]
  posts       Post[]

  @@map("groups")
}

model UserGroup {
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int      @map("group_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  role      Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([groupId, userId])
  @@map("user_groups")
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   Int       @map("owner_id")
  content   String
  //All reposts this post has
  reposts   Post[]    @relation("reposts")
  //If this post is a repost, this relation will have the original post
  repost    Post?     @relation("reposts", fields: [repostId], references: [id])
  repostId  Int?      @map("repost_id")
  group     Group?    @relation(fields: [groupId], references: [id])
  groupId   Int?      @map("group_id")
  likes     Like[]
  comments  Comment[]
  medias    Media[]
  reports   Report[]

  @@map("posts")
}

model Like {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, postId])
  @@map("likes")
}

model Comment {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  owner           User      @relation(fields: [ownerId], references: [id])
  ownerId         Int       @map("owner_id")
  originalPost    Post      @relation(fields: [originalPostId], references: [id])
  originalPostId  Int       @map("original_post_id")
  parentCommentId Int?      @map("parent_comment_id")
  parentComment   Comment?  @relation("parentComment", fields: [parentCommentId], references: [id])
  childComments   Comment[] @relation("parentComment")
  content         String

  @@map("comments")
}

model Media {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int      @map("post_id")
  fileId    Int      @map("file_id")
  tags      Tag[]

  @@map("medias")
}

model Tag {
  content   String   @id
  posts     Media[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tags")
}

model Report {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int      @map("post_id")

  @@map("reports")
}

model UserBlock {
  user          User     @relation("UserBlocked", fields: [userId], references: [id])
  userId        Int      @map("user_id")
  blockedUser   User     @relation("UserBlockedBy", fields: [blockedUserId], references: [id])
  blockedUserId Int      @map("blocked_user_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@id([userId, blockedUserId])
  @@map("user_blocks")
}
